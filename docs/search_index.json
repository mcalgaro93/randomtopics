[["index.html", "Random Topics Chapter 1 About this book", " Random Topics Matteo Calgaro 2023-07-18 Chapter 1 About this book In the opening of this book, I warmly welcome you into the intimate realm of my academic life. This (just started) collection seeks to capture some thoughts, lessons, seminars, and practical examples gathered throughout my scholarly journey. Within these pages, I hope to share valuable informations and experiences that have shaped my understanding and growth. With humility and gratitude, I invite you to explore this humble compilation. "],["rarefaction-practice-in-microbiome-data-analysis.html", "Chapter 2 Rarefaction Practice in Microbiome Data Analysis 2.1 Aims of this chapter 2.2 Introduction and definitions 2.3 Rarefaction in practice 2.4 References", " Chapter 2 Rarefaction Practice in Microbiome Data Analysis In the last decade, there has been ongoing debate regarding the optimal approach for normalizing sequencing depth in samples analyzed using 16S rRNA gene sequencing. A highly influential paper by McMurdie and Holmes (McMurdie and Holmes, 2014) strongly argued against the practice of rarefying sequence counts, deeming it “inadmissible” and discouraging its utilization. Despite a rebuttal on this subject (Weiss et al., 2017), which demonstrated the benefits of rarefying in certain cases, the proponents of alternative normalization method seem to have a predominant influence within the microbiome research community. Nevertheless, a recent publication by Patrick Schloss (Schloss, 2023), shows that rarefaction is the most robust approach to control for uneven sequencing effort when considered across a variety of alpha and beta diversity metrics. 2.1 Aims of this chapter Collect some definitions and clarify the difference between the terms “rarefy” and “rarefaction”; exemplify the previous terms in alpha and beta diversity analyses; provide the code to implement rarefaction curves and to estimate rarefaction estimates of richness and Bray-Curtis dissimilarities. 2.2 Introduction and definitions Rarefaction in microbiome research was introduced from ecology research out of the need to address the issue of uneven sampling depth. When studying microbial communities using high-throughput sequencing techniques like 16S rRNA gene sequencing or shotgun metagenomics, the number of sequencing reads obtained from different samples can vary significantly. This uneven sampling depth can introduce biases and make it challenging to compare the diversity and abundance of microbial taxa between samples accurately. Rarefaction standardises the sampling effort across all samples and should ensure fair comparisons of diversity and abundance. By repeatedly subsampling the sequencing data to a common sequencing depth for each sample, the rarefaction method allows researchers to obtain a consistent and unbiased estimate of the microbial diversity present in each sample. Library size normalization by random subsampling without replacement is called rarefying. There is confusion in the literature regarding terminology, and sometimes this normalization approach is conflated with a non-parametric resampling technique, called rarefaction. According to (McMurdie and Holmes, 2014), rarefying is most often defined by the following steps: Select a minimum library size, \\(N_{L,min}\\). This has also been called the rarefaction level. Discard libraries (microbiome samples) that have fewer reads than \\(N_{L,min}\\). Subsample the remaining libraries without replacement such that they all have size \\(N_{L,min}\\). Let’s make a practical example in R. We start by creating a very simple count matrix with 3 taxa and 2 samples. # Generate a very simple count matrix where the first # sample has half the library size of the second sample count_matrix &lt;- matrix(c(68, 32, 200, 200, 200, 200), nrow = 3, ncol = 2) colnames(count_matrix) &lt;- c(&quot;S1&quot;, &quot;S2&quot;) rownames(count_matrix) &lt;- c(&quot;Taxa1&quot;, &quot;Taxa2&quot;, &quot;Taxa3&quot;) count_matrix ## S1 S2 ## Taxa1 68 200 ## Taxa2 32 200 ## Taxa3 200 200 S2 sample has a library size which is twice the library size of sample S1. colSums(count_matrix) ## S1 S2 ## 300 600 According to the definition, we choose \\(N_{L,min} = 300\\) and we subsample, without replacement (random number generation seed equal to 123), the counts such that they all the samples have size \\(300\\). set.seed(123) Lmin &lt;- min(colSums(count_matrix)) count_rarefy &lt;- apply(count_matrix, 2, FUN = function(smpl){ vec &lt;- rep(rownames(count_matrix), times = smpl) subsampling &lt;- sample(vec, size = Lmin, replace = FALSE) table(subsampling) }) count_rarefy ## S1 S2 ## Taxa1 68 103 ## Taxa2 32 109 ## Taxa3 200 88 The resulting table is a table where the S1 remains the same as before subsampling. Indeed, subsampling \\(N_{L,min} = 300\\) counts from a sample with that same library size is like taking the entire sample. S2 instead, has now a total of 300 counts divided across the three taxa. As the subsampling step is performed only once, another way to obtain the rarefied counts more easily, is to divide the counts by their library size, multiply the relative abundances by \\(N_{L,min} = 300\\), and round the results. count_rarefy_simple &lt;- apply(count_matrix, 2, FUN = function(smpl){ rel_abundance &lt;- smpl/sum(smpl) round(Lmin * rel_abundance, digits = 0) }) count_rarefy_simple ## S1 S2 ## Taxa1 68 100 ## Taxa2 32 100 ## Taxa3 200 100 According to (Schloss, 2023), the authors of (McMurdie and Holmes, 2014) were correct to state that the distinction between “rarefying” and “rarefaction” was confusing and led to their conflation. However, they poorly managed to solve the problem due to misleading sentences throughout the publication. Traditionally, repeating the subsampling step a large number of times and averaging the result is called rarefaction. Instead, rarefying or subsampling is rarefaction, but with a single randomization. To minimize confusion, we will use “subsampling” in place of “rarefying” through the rest of this chapter. For clarity, we will use the same definition of rarefaction of (Schloss, 2023): Select a minimum library size, \\(N_{L,min}\\). Researchers are encouraged to report the value of \\(N_{L,min}\\). Discard samples that have fewer reads than \\(N_{L,min}\\). Subsample the remaining libraries without replacement such that they all have size \\(N_{L,min}\\). Compute the desired metric (e.g., richness, Shannon diversity, Bray-Curtis distances) using the subsampled data. Repeat steps 3 and 4 a large number of iterations (typically 100 or 1,000). Researchers are encouraged to report the number of iterations. Compute summary statistics (e.g., the mean) using the values from step 4. 2.3 Rarefaction in practice The rarefaction, i.e. repeating the subsampling step a large number of times and averaging the result, is here exemplified for Richness index and Bray-Curtis dissimilarity index. Let’s start by using an example dataset from a research published in PNAS in early 2011 (Caporaso et al., 2011). This work compared the microbial communities from 25 environmental samples and three known “mock communities” – a total of 9 sample types – at a depth averaging 3.1 million reads per sample. library(mia) data(&quot;GlobalPatterns&quot;, package = &quot;mia&quot;) gp_genus &lt;- mia::agglomerateByRank(GlobalPatterns, &quot;Genus&quot;) gp_genus &lt;- gp_genus[ rowSums(assay(gp_genus, &quot;counts&quot;)) &gt; 0, ] library(scater) gp_genus &lt;- addPerCellQC(gp_genus) Here we show the distribution of library sizes across samples. We have library sizes ranging from 58688 reads to 40x times more. library(miaViz) ## Loading required package: ggraph summary(colData(gp_genus)$sum) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 58688 567103 1106849 1085257 1527330 2357181 plotColData(object = gp_genus, y = &quot;sum&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) Figure 2.1: Sample library sizes grouped and coloured by sample type. 2.3.1 Richness index Richness refers to the overall count of species within a community (sample). The most basic richness index corresponds to the number of observed species (observed richness). Richness estimates remain unaffected by the abundances of individual species. To compute richness we use the estimateRichness function of the mia package. gp_genus &lt;- mia::estimateRichness(gp_genus, assay.type = &quot;counts&quot;, index = &quot;observed&quot;) We can inspect the observed richness distribution of each sample type: p_r &lt;- plotColData(object = gp_genus, y = &quot;observed&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(title = &quot;Richness in raw counts&quot;) p_r Figure 2.2: Richness estimates grouped and coloured by sample type. And we can also describe the relationship between library size and richness. When the sequencing depth is enough to describe the samples we do not expect to see any particular pattern in this kind of graphical representation. plotColData(object = gp_genus, x = &quot;sum&quot;, y = &quot;observed&quot;, colour_by = &quot;SampleType&quot;) + geom_smooth() + labs(x = &quot;Library Size&quot;, y = &quot;Richness&quot;, title = &quot;Richness vs Library Size&quot;) ## `geom_smooth()` using method = &#39;loess&#39; ## and formula = &#39;y ~ x&#39; Figure 2.3: Relationship between richness and library size coloured by sample type. But all of the above plots are generated from raw data. Here we want to inspect the effect of rarefaction. For this reason we use the subsampleCounts function of the package mia to obtain subsampled counts. We repeat this process 3 times with 3 different seeds (1, 2, and 3). We store the results in three differentially named assays of the TreeSummarizedExperiment object: rare1, rare2, and rare3. gp_genus &lt;- mia::subsampleCounts(gp_genus, assay.type = &quot;counts&quot;, min_size = min(gp_genus$sum), seed = 1, replace = FALSE, verbose = FALSE, name = &quot;rare1&quot;) gp_genus &lt;- mia::subsampleCounts(gp_genus, assay.type = &quot;counts&quot;, min_size = min(gp_genus$sum), seed = 2, replace = FALSE, verbose = FALSE, name = &quot;rare2&quot;) gp_genus &lt;- mia::subsampleCounts(gp_genus, assay.type = &quot;counts&quot;, min_size = min(gp_genus$sum), seed = 3, replace = FALSE, verbose = FALSE, name = &quot;rare3&quot;) We compute richness for each subsampled count matrix: gp_genus &lt;- estimateRichness(gp_genus, assay.type = &quot;rare1&quot;, name = &quot;rich1&quot;, index = &quot;observed&quot;) gp_genus &lt;- estimateRichness(gp_genus, assay.type = &quot;rare2&quot;, name = &quot;rich2&quot;, index = &quot;observed&quot;) gp_genus &lt;- estimateRichness(gp_genus, assay.type = &quot;rare3&quot;, name = &quot;rich3&quot;, index = &quot;observed&quot;) And plot the results: p_r1 &lt;- plotColData(object = gp_genus, y = &quot;rich1&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(title = &quot;Subsampled counts - seed = 1&quot;, subtitle = paste(&quot;N(L,min) =&quot;, min(gp_genus$sum))) p_r2 &lt;- plotColData(object = gp_genus, y = &quot;rich2&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(title = &quot;Subsampled counts - seed = 2&quot;, subtitle = paste(&quot;N(L,min) =&quot;, min(gp_genus$sum))) p_r3 &lt;- plotColData(object = gp_genus, y = &quot;rich3&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(title = &quot;Subsampled counts - seed = 3&quot;, subtitle = paste(&quot;N(L,min) =&quot;, min(gp_genus$sum))) library(patchwork) (plot_spacer() + p_r + plot_spacer()) / (p_r1 + p_r2 + p_r3) + plot_layout(guides = &quot;collect&quot;) + plot_annotation(tag_levels = &quot;a&quot;) Figure 2.4: Richness estimates grouped and coloured by sample type. a) Raw data. b) subsampled counts, seed = 1. c) subsampled counts, seed = 2. d) subsampled counts, seed = 3. The main difference in these panels are the range of the y-axis: it reaches higher values in a rather than b, c, and d. Moreover, while the richest samples belonged to Freshwater (creek) when the richness was evaluated using raw counts (panel a), Sediment (estuary) samples became the richest when the subsampled counts were used instead (b, c, and d panels). This is probably due to the differential presence of rare taxa between the two environments. Minor differences are observable when comparing b, c, and d panels, but still they are present. Practically, rarefaction consists in averaging the index measures of panels b, c, and d to obtain a single value for each sample. gp_genus$rich_rarefaction &lt;- rowMeans( as.data.frame(colData(gp_genus)[, c(&quot;rich1&quot;, &quot;rich2&quot;, &quot;rich3&quot;)])) p_rarefaction &lt;- plotColData(object = gp_genus, y = &quot;rich_rarefaction&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(title = &quot;Rarefaction Richness&quot;, subtitle = paste(&quot;Subsamplings = 3, N(L,min) =&quot;, min(gp_genus$sum))) p_rarefaction Figure 2.5: Richness estimates grouped and coloured by sample type. Richness indexes were averaged across the 3 subsamplings to obtain a single value for each sample. To automatise the entire procedure the following function can be used: library(BiocParallel) rarefaction_richness &lt;- function( tse, # The object to use assay.type = &quot;counts&quot;, # Assay to use subsamplings = 100, # Number of subsamplings minLibSize = NULL, # The desired library size seed = 123, # The seed BPPARAM = SerialParam()){ # Parallelisation counts &lt;- assay(tse, &quot;counts&quot;) if(is.null(minLibSize)) minLibSize &lt;- min(colSums(counts)) richness_list &lt;- bplapply( X = 1:subsamplings, BPPARAM = BPPARAM, BPOPTIONS = bpoptions(RNGseed = seed), FUN = function(sub){ # Subsampling step tse &lt;- mia::subsampleCounts(tse, assay.type = assay.type, min_size = minLibSize, # seed = runif(1, 0, .Machine$integer.max), replace = FALSE, verbose = FALSE, name = &quot;sub&quot;) # Estimation step richness &lt;- mia::estimateRichness(tse, assay.type = &quot;sub&quot;, index = &quot;observed&quot;, name = &quot;richness&quot;)$richness return(richness) }) # Return the averaged values colMeans(plyr::ldply(richness_list)) } We run it in parallel (Linux or MacOS, Windows users should use BPPARAM = SerialParam()) and we directly store the computed values inside the TreeSummarizedExperiment object. gp_genus$rarefaction_richness &lt;- rarefaction_richness( tse = gp_genus, assay.type = &quot;counts&quot;, subsamplings = 100, BPPARAM = MulticoreParam(4), minLibSize = NULL, seed = 123) Finally, the graphical representation of rarefied richness (seed = 123, number of subsamplings = 100, \\(N_{L,min} = 58688\\)) is reported below. p_rarefaction100 &lt;- plotColData(object = gp_genus, y = &quot;rarefaction_richness&quot;, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(title = &quot;Rarefaction Richness&quot;, subtitle = paste(&quot;Seed = 123, Subsamplings = 100, N(L,min) =&quot;, min(gp_genus$sum))) p_rarefaction100 Figure 2.6: Richness estimates grouped and coloured by sample type. Richness indexes were averaged across 100 subsamplings (rarefaction library size = 58688) to obtain a single value for each sample (seed = 123). 2.3.2 Rarefaction curves One of the most informative application that involves rarefaction and microbial richness is the creation of rarefaction curves: # devtools::install_github(&quot;gauravsk/ranacapa&quot;) library(ranacapa) set.seed(123) rarefaction_curves &lt;- ggrare( mia::makePhyloseqFromTreeSE(gp_genus), step = 10000, plot = FALSE, parallel = TRUE) library(ggplot2) # https://rdrr.io/github/LTLA/scater/src/R/plot_colours.R total_colors &lt;- scater:::.get_palette(&quot;tableau10medium&quot;)[1:9] names(total_colors) &lt;- levels(gp_genus$SampleType) print(rarefaction_curves) + geom_line(aes(color = SampleType)) + facet_wrap(~ SampleType, nrow = 3, ncol = 3) + scale_color_manual(values = total_colors) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs(title = &quot;Rarefaction curves&quot;, subtitle = &quot;Faceted by sample type&quot;) Figure 2.7: Rarefaction curves. Figure 2.8: Rarefaction curves. In this case the process of rarefaction consists in repeatedly subsampling the sequencing data at different depths, typically starting from the smallest number of reads in any sample to the largest. At each subsampling depth, the number of observed taxa is calculated (i.e., richness), and these values are plotted against the corresponding sequencing depth. The resulting curve shows how the diversity of the microbial community changes as the sequencing depth increases. The importance of rarefaction curves lies in several key aspects: Assessing data completeness. If the curves reach a plateau, it suggests that the sequencing depth is sufficient to capture most of the diversity in the sample. On the other hand, if the curves do not plateau (e.g., one tongue sample, and all Sediment (estuary) samples), it indicates that more sequencing effort is needed to adequately characterize the microbial diversity. Fair comparison. Rarefaction curves enable fair comparisons of diversity across different samples with varying sequencing depths. By subsampling all samples to the same sequencing depth, the curves provide a standardized view of the community’s diversity, facilitating reliable comparisons. Assessing quality. Rarefaction curves can help identify samples with low sequencing depth that might require additional attention or potentially be excluded from further analysis due to insufficient data. Study design optimization. Researchers can use rarefaction curves during the study design phase to estimate the required sequencing depth for reliable and comprehensive community profiling. This information can help optimize cost-effectiveness and resource allocation. 2.3.3 Bray-Curtis dissimilarity index Similarly to what we did for microbial richness, we can also study the effect of rarefaction on beta-diversity. In particular, we will focus on the Bray-Curtis dissimilarity index, a widely used metric to quantify the dissimilarity or similarity between two ecological samples, typically used in the context of community ecology and biodiversity studies. Here we start by computing the Bray-Curtis indexes on raw counts, relative abundances (Total Sum Scaling normalization), and some subsamplings (the same used earlier for richness). Then use Multi Dimensional Scaling unsupervised ordination method is used to visualize the results. gp_genus &lt;- transformCounts(gp_genus, assay.type = &quot;counts&quot;, method = &quot;relabundance&quot;) gp_genus &lt;- runMDS(gp_genus, FUN = vegan::vegdist, method = &quot;bray&quot;, name = &quot;PCoA_BC_raw&quot;, assay.type = &quot;counts&quot;) gp_genus &lt;- runMDS(gp_genus, FUN = vegan::vegdist, method = &quot;bray&quot;, name = &quot;PCoA_BC_TSS&quot;, assay.type = &quot;relabundance&quot;) gp_genus &lt;- runMDS(gp_genus, FUN = vegan::vegdist, method = &quot;bray&quot;, name = &quot;PCoA_BC1&quot;, assay.type = &quot;rare1&quot;) gp_genus &lt;- runMDS(gp_genus, FUN = vegan::vegdist, method = &quot;bray&quot;, name = &quot;PCoA_BC2&quot;, assay.type = &quot;rare2&quot;) gp_genus &lt;- runMDS(gp_genus, FUN = vegan::vegdist, method = &quot;bray&quot;, name = &quot;PCoA_BC3&quot;, assay.type = &quot;rare3&quot;) p_bc_raw &lt;- plotReducedDim(gp_genus, &quot;PCoA_BC_raw&quot;, colour_by = &quot;SampleType&quot;) + labs(title = &quot;Raw counts, Bray-Curtis, PCoA&quot;) p_bc_tss &lt;- plotReducedDim(gp_genus, &quot;PCoA_BC_TSS&quot;, colour_by = &quot;SampleType&quot;) + scale_y_reverse() + labs(title = &quot;TSS, Bray-Curtis, PCoA&quot;) p_bc_r1 &lt;- plotReducedDim(gp_genus, &quot;PCoA_BC1&quot;, colour_by = &quot;SampleType&quot;) + labs(title = &quot;Subsampled seed = 1, Bray-Curtis, PCoA&quot;, subtitle = paste(&quot;N(L,min) =&quot;, min(gp_genus$sum))) p_bc_r2 &lt;- plotReducedDim(gp_genus, &quot;PCoA_BC2&quot;, colour_by = &quot;SampleType&quot;) + labs(title = &quot;Subsampled seed = 2, Bray-Curtis, PCoA&quot;, subtitle = paste(&quot;N(L,min) =&quot;, min(gp_genus$sum))) p_bc_r3 &lt;- plotReducedDim(gp_genus, &quot;PCoA_BC3&quot;, colour_by = &quot;SampleType&quot;) + labs(title = &quot;Subsampled seed = 3, Bray-Curtis, PCoA&quot;, subtitle = paste(&quot;N(L,min) =&quot;, min(gp_genus$sum))) (p_bc_raw + p_bc_tss + plot_spacer()) / (p_bc_r1 + p_bc_r2 + p_bc_r3) + plot_layout(guides = &quot;collect&quot;) + plot_annotation(tag_levels = &quot;a&quot;) The main difference in these panels is only between a and all the others which are quite similar. That’s because in this case the total sum scaling normalization (panel b) behave similarly to using subsampling at the fixed library size of \\(N_{L,min}=58688\\) (panels c, d, and e). The Bray-Curtis dissimilarity between two samples is computed following the formula: \\[ BC_{jk} = \\frac{\\sum_i|x_{ij}-x_{ik}|}{\\sum_ix_{ij}+x_{ik}} \\] where \\(i\\) is the number of taxa and \\(j,k\\) are the sample indexes. By construction, when a sample has 10x more counts than the other, the numerator could be inflated just for this reason and not because of a real difference between the samples. Practically, rarefaction consists in averaging the index measures of panels b, c, and d to obtain a single value for each sample. # Recompute the distances bc1 &lt;- vegan::vegdist(x = t(assay(gp_genus, &quot;rare1&quot;)), method = &quot;bray&quot;) bc2 &lt;- vegan::vegdist(x = t(assay(gp_genus, &quot;rare2&quot;)), method = &quot;bray&quot;) bc3 &lt;- vegan::vegdist(x = t(assay(gp_genus, &quot;rare3&quot;)), method = &quot;bray&quot;) # Average the distances across subsamplings bc_rarefaction &lt;- (bc1 + bc2 + bc3) / 3 # Add the PCoA coordinates in a new reducedDim slot # following the instructions in help(&quot;runMDS&quot;) reducedDim(gp_genus, &quot;PCoA_BCrarefaction&quot;) &lt;- cmdscale(d = bc_rarefaction, k = 2, eig = TRUE)$points plotReducedDim(gp_genus, &quot;PCoA_BCrarefaction&quot;, colour_by = &quot;SampleType&quot;) + labs(title = &quot;Rarefaction Bray-Curtis, PCoA&quot;, subtitle = paste(&quot;subsamplings = 3, N(L,min) =&quot;, min(gp_genus$sum))) As we did for the richness index, the process can be automatised: rarefaction_BC_PCoA &lt;- function( tse, # The object to use assay.type = &quot;counts&quot;, # Assay to use subsamplings = 10, # Number of subsamplings minLibSize = NULL, # The desired library size seed = 123, # The seed BPPARAM = SerialParam()){ # Parallelisation counts &lt;- assay(tse, &quot;counts&quot;) if(is.null(minLibSize)) minLibSize &lt;- min(colSums(counts)) dist_list &lt;- bplapply( X = 1:subsamplings, BPPARAM = BPPARAM, BPOPTIONS = bpoptions(RNGseed = seed), FUN = function(sub){ # Subsampling step tse &lt;- mia::subsampleCounts(tse, assay.type = assay.type, min_size = minLibSize, # seed = runif(1, 0, .Machine$integer.max), replace = FALSE, verbose = FALSE, name = &quot;sub&quot;) # BC calculation step BC_dist &lt;- vegan::vegdist( x = t(assay(tse, &quot;sub&quot;)), method = &quot;bray&quot;) return(BC_dist) }) # Compute the mean BC distance avg_BC_dist &lt;- Reduce(f = &#39;+&#39;, dist_list) / subsamplings # Compute the PCoA coordinates and return them cmdscale(d = avg_BC_dist, k = 2, eig = TRUE)$points } We run it in parallel (Linux or MacOS, Windows users should use BPPARAM = SerialParam()) and we directly store the computed values inside the TreeSummarizedExperiment object in the reducedDim slot. reducedDim(gp_genus, &quot;PCoA_BCrarefaction100&quot;) &lt;- rarefaction_BC_PCoA( tse = gp_genus, assay.type = &quot;counts&quot;, subsamplings = 100, minLibSize = NULL, seed = 321, BPPARAM = MulticoreParam(4)) Finally, the graphical representation of rarefied beta-diversity using Bray-Curtis dissimilarity index and PCoA ordination (seed = 123, number of subsamplings = 100, \\(N_{L,min} = 58688\\)) is reported below. plotReducedDim(gp_genus, &quot;PCoA_BCrarefaction100&quot;, colour_by = &quot;SampleType&quot;) + labs(title = &quot;Rarefaction Bray-Curtis, PCoA&quot;, subtitle = paste(&quot;subsamplings = 100, seed = 321, N(L,min) =&quot;, min(gp_genus$sum))) + scale_y_reverse() In this scenario rarefaction and Total Sum Scaling (TSS) normalization produced similar results. This is probably due to the fact that all samples are already at a sufficient depth to capture most of the microbial diversity. But this can also occur when: the differences in sequencing depth between samples are relatively small; the samples have similar distributions of taxa and similar alpha diversity measures, so the impact of rarefaction or TSS normalization is minimal. However, in cases where there are substantial differences in sequencing depth or if the samples have highly variable distributions of taxa, rarefaction and TSS normalization might lead to different results. In such situations, researchers should carefully consider which normalization approach is more appropriate for their specific dataset and research objectives. 2.4 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
